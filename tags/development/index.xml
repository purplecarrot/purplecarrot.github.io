<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Purplecarrot</title><link>https://purplecarrot.co.uk/tags/development/</link><description>Recent content in Development on Purplecarrot</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 12 Sep 2020 10:11:00 +0000</lastBuildDate><atom:link href="https://purplecarrot.co.uk/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Practical Tekton</title><link>https://purplecarrot.co.uk/post/2020-09-12-tekton_and_knative/</link><pubDate>Sat, 12 Sep 2020 10:11:00 +0000</pubDate><guid>https://purplecarrot.co.uk/post/2020-09-12-tekton_and_knative/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This post gives an overview of Tekton based on my initial testing and exploration of the project within a RedHat OpenShift (Kubernetes) cluster (using v4.4 and v4.5)&lt;/p>
&lt;p>My goal was to explore the new technologies to see if I could simplify the developer experience for our developers and users. A simple task: to take a VS Code commit (running on Windows 10 desktop I used in my day job), trigger a pipeline to build the application into a container image, run unit tests and vulnerability scanning, and then deploy the application image to the OpenShift cluster using KNative.&lt;/p>
&lt;p>Note that Tekton is known as OpenShift Pipelines in OpenShift, and KNative is known as OpenShift Serverless. They're essentially the same thing, and I may use those terms interchangably in this document.&lt;/p>
&lt;p>I'm not going to cover installation of Tekton or KNative here, because there are plenty of documents out there that already cover it, both in vanilla Kubernetes clusters and OpenShift clusters. In any case with OpenShift versions of these products, it's relatively easy to install using the Operators feature found in OpenShift.&lt;/p>
&lt;h2 id="what-is-tekton">What is Tekton?&lt;/h2>
&lt;p>Tekton is a tool for creating CI/CD application container build pipelines within Kubernetes. Tekton is &lt;em>kubernetes-native&lt;/em>, meaning it was designed from the ground up as a CI/CD system running directly inside a Kubernetes cluster. It is implemented using various CRDs (&lt;code>Pipeline, PipelineRun, Tasks, ClusterTasks, Triggers, etc&lt;/code>) provided under &lt;code>tekton.dev&lt;/code> and &lt;code>triggers.tekton.dev&lt;/code> API groups. As such, if you're experienced Kubernetes user and comfortable with applying, patching and editing the YAML of Kubernetes resources, you'll be right at home.&lt;/p>
&lt;h2 id="pipelines-tasks-and-steps">Pipelines, Tasks and Steps&lt;/h2>
&lt;p>To deploy a Tekton CI/CD pipeline, you start of by creating a &lt;code>Pipeline&lt;/code> YAML resources which consists of a number of &lt;code>Tasks&lt;/code>. Each &lt;code>Task&lt;/code> in the &lt;code>Pipeline&lt;/code> gets deployed as its own pod within the namespace, and is made up of a series of steps, which each step being a separate container image in the pod.&lt;/p>
&lt;p>So, for example if you have a &lt;code>Task&lt;/code> with three build, push, scan steps, a single pod with three different container images is normally deployed. In addition, Tekton itself adds init containers and other things to the pod in order to execute the pipeline (for example, the pipelines-creds-init-rhel8 init container which setups secrets and any script resources specified in your tasks, etc). The order of execution of each &lt;code>Task&lt;/code> is determined by setting the &lt;code>spec.tasks[*].runAfter:&lt;/code> parameter, which can be used to ensure the Pipeline runs in a specific order (steps can also run in parallel by setting these to be the same on different &lt;code>Tasks&lt;/code>). Below is a fabricated example to illustrate this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">scan&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">scan&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">push&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">push&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runAfter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">scan&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build-binary&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">registry/builder:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">registry/test:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tekton has a &lt;a href="https://github.com/tektoncd/catalog">catalog&lt;/a> of pre-created &lt;code>Tasks&lt;/code>, and RedHat have a curated list of these that are then bundled as ClusterTasks and installed when OpenShift Pipelines is. &lt;code>ClusterTasks&lt;/code> are identical to &lt;code>Tasks&lt;/code> except that they are global resources and available for use by all users across all namespaces in a cluster, whereas &lt;code>Tasks&lt;/code> are namespaced.&lt;/p>
&lt;h2 id="parameters">Parameters&lt;/h2>
&lt;p>Inputs to your pipeline are specified in &lt;code>spec.params&lt;/code> of the &lt;code>Pipeline&lt;/code> object, and these can then be made available to and referenced by each task (&lt;code>spec.tasks[*].params&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tekton.dev/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-pipeline&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GIT_REPO&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">URL of the Git repository&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GIT_BRANCH&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Git Branch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">REGISTRY&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Container registry name&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEST_IMAGE&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Name of image that will be built&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEST_IMAGE_TAG&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Image tag&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">source_dir&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(params.GIT_REPO)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">image-name&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;#34;$(params.REGISTRY)/${DEST_IMAGE}/${DEST_IMAGE_TAG}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use parameters that were the outputs from other &lt;code>Tasks&lt;/code> that have already executed. For example, you could use the Git commit SHA from the HEAD of the repository you clone in a git-clone &lt;code>Task&lt;/code>, and pass it as an input into the build &lt;code>Task&lt;/code> that builds the container (for example, perhaps you want to add a container image LABEL with the commit sha). These are held in a parameter called &lt;code>$(tasks.&amp;lt;task_name&amp;gt;.results)&lt;/code> (tou can also create these yourself, more on that in a different post)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git-clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">taskRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Task&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">commit&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(tasks.git-clone.results.commit)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pipelineresources">PipelineResources&lt;/h2>
&lt;p>There is also a Tekton resource type called a &lt;code>PipelineResource&lt;/code>, which is an input or output object that can be defined as a &lt;code>spec.resource&lt;/code> and provided to a &lt;code>Task&lt;/code>. For example, you might have a Git Repo &lt;code>PipelineResource&lt;/code> input which defines a Git repo (url, branch) a Git clone type &lt;code>Task&lt;/code> can use as an input, or an output object for a container image output from a build &lt;code>Tasks&lt;/code> (eg &lt;code>$(resources.outputs.image.url)&lt;/code>).&lt;/p>
&lt;p>In my experience with Tekton 0.7, these were hideously complicated to debug, I found them very opaque and hard to troubleshoot, and had compatability issues using them where they didn't fully support the auth mechanism of our container registry (JFrog Artifactory). In most cases using parameters was easier and just as functional, so I quickly stopped using PipelineResources.&lt;/p>
&lt;p>In additon, during OpenShift Pipelines version updates I noticed that more ClusterTasks were switching from using PipelineResouurces as inputs to using standard parameters as inputs (eg &lt;code>$(params.git_url&lt;/code>) instead of &lt;code>$(resources.inputs.git.url)&lt;/code>). There is a section of the Tetkon docs &lt;a href="https://github.com/tektoncd/pipeline/blob/master/docs/resources.md#why-arent-pipelineresources-in-beta">Why Aren't PipelineResources in Beta?&lt;/a> which also suggests there have been issues, and so it appears that they are falling out of favour or at least need some more work. In any case, I've not found a compelling reason for using them over parameters.&lt;/p>
&lt;h2 id="secrets">Secrets&lt;/h2>
&lt;p>When using &lt;code>Secrets&lt;/code> with Tekton it is worth noting that in comparison to others users of &lt;code>Secrets&lt;/code>. Tekton is very particular about their type and annotations. Most of our &amp;quot;Git secrets&amp;quot; (&lt;code>Secrets&lt;/code> containing private SSH keys that are attached to &lt;code>BuildConfigs&lt;/code>) were initially created as &lt;code>type: Opaque&lt;/code>. Whilst this allows them to be used with &lt;code>BuildConfigs&lt;/code>, they are not picked up and used with Tekton. To use them, you will need to ensure the &lt;code>Secrets&lt;/code> type is set to &lt;code>type: kubernetes.io/ssh-auth&lt;/code>.&lt;/p>
&lt;p>In addition, Tekton secrets must have annotations that explictly define hosts where they will be used. Lastly, a &lt;code>data.known_hosts&lt;/code> (which you can get from $HOME/.ssh/know_hosts after you've connected to it via SSH) is also required to avoid error messages. The example below shows an example of a correctly annotated SSH key &lt;code>Secret&lt;/code> for use with Tekton.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my_git_ssh_key&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tekton.dev/git-0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mygithost.example.com &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes.io/ssh-auth&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ssh-privatekey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;base64 encoded&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">known_hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;base64 encoded&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="workspaces">Workspaces&lt;/h2>
&lt;p>Workspaces were introduced into Tekton as a new feature whilst I was working on it. They're kind of like standard &lt;code>Volumes&lt;/code> in a Pod in that they present &lt;code>Secrets&lt;/code>, &lt;code>ConfigMaps&lt;/code> or &lt;code>PersistentVolumeClaims&lt;/code> into a location in the filesystem of a given &lt;code>Task's&lt;/code> pod. I only used a &lt;code>PVC&lt;/code> in my testing. The value of this is that you can share data between tasks (eg the source code your application build task needs after it has cloned from your git clone task).&lt;/p>
&lt;h2 id="running-a-pipeline">Running a Pipeline&lt;/h2>
&lt;p>When you execute a &lt;code>Pipeline&lt;/code> a &lt;code>PipelineRun&lt;/code> object is created that connects the &lt;code>Workspace&lt;/code>, &lt;code>ServiceAccounts&lt;/code>, &lt;code>Pipelines&lt;/code> etc together and deploys the Pods needed to run your &lt;code>Pipeline&lt;/code> - or in other words, there is one &lt;code>PipelineRun&lt;/code> object created for each time the &lt;code>Pipeline&lt;/code> is executed.&lt;/p>
&lt;p>As all Tekton objects are implemented natively in Kubernetes as CRDs, you could just use oc/kubectl to use Tekton, but using tkn CLI client is much easier (in OpenShift, you can also use the Web Console UI, navigate Pipelines menu then simply click Start in the context menu) for interacting and using Tekton pipelines. For example, to start your pipeline run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>tkn start mypipeline
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, tkn will go into an interactive mode and prompt you to enter all the input information it requires. But I quickly got into the habit of passing these all as additional command line parameters, and immediately displaying any logs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>tkn pipeline start mypipeline --user-param-defaults -w name=workspace,claimName=workspace --showlog
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Though I have been using OpenShift and Kubernetes for quite a few years, I was new to both KNative and Tekton. Both are fast moving projects, with many resources in alpha or beta (RedHat Tech Preview) at best.&lt;/p>
&lt;p>As with any new software, it can be a little tricky to workout and understand how it all integrates together. This is particulary true in a company like the one where I work where we run OpenShift/Kubernetes clusters in a more secure, disconnected, on-premise environment.&lt;/p>
&lt;p>In particular, we tend to run with on-prem instances of commercial products (eg JFrog Artifactory Container Registry) instead of cloud or externally hosted service (like Docker Hub or Quay.io). Even though these services run on a private disconnected network, we are also required to adhere to stricter security policies than most organisations (eg never public open access Git repos or registries, always requiring credentials for any type of pull or push, using private CAs and PKI). This means being an early adopter of new software- that developers and testers have developed with standard cloud services out on the internet rather than on-prem commerical products - you're likely to encounter more bugs for the first time using new projects.&lt;/p>
&lt;p>The table below shows the versions I've been using, and each version fixed bugs I'd actually seen myself in the prior version. I can't stress enough that if you're an OpenShift or non-cloud Kubernetes user where you manage the versions, use both the latest OpenShift and Pipeline versions.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>OpenShift&lt;/th>
&lt;th>Pipelines&lt;/th>
&lt;th>Base Tekton&lt;/th>
&lt;th>tkn CLI&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>OpenShift 4.6&lt;/td>
&lt;td>Tech Preview 1.2&lt;/td>
&lt;td>Tekton 0.16.3&lt;/td>
&lt;td>tkn 0.13.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OpenShift 4.5&lt;/td>
&lt;td>Tech Preview 1.1&lt;/td>
&lt;td>Tekton 0.14.3&lt;/td>
&lt;td>tkn 0.11.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OpenShift 4.4&lt;/td>
&lt;td>Tech Preview 1.0&lt;/td>
&lt;td>Tekton 0.11.3&lt;/td>
&lt;td>tkn 0.9.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The other thing with new alpha/beta software is that it changes quite quickly, and this means that many of the articles, tutorials, GitHub comments and issues reference objects that have been deprecated or now have a new &lt;code>spec:&lt;/code> or something (for example one of the prominent Serverless tutorials still in the top of Google searchs as I write this even details the KNative build component, which has now been deprecated in favour of Tekton in a separate project). Be very careful using older examples and tutorials found on the internet.&lt;/p>
&lt;p>Anyway, after a few teething issues I got a working Python pipeline where I built, scanned and deployed a Python container image as a Knative service and I can say I really like Tekton. In particular, I never really enjoyed writing Groovy and much prefer creating pipelines from combination of bash scripts and YAML editing of Kubernetes resources.&lt;/p>
&lt;p>In my next post, I will detail how I'm using KNative (Serverless) as a lightweight way to deploy your application at the end of the Pipeline. Knative promises lots, but its use in development and build systems is a solid use case that can easily be used today.&lt;/p></description></item><item><title>My Subversion Repo Moved!</title><link>https://purplecarrot.co.uk/2013/09/30/my-subversion-repo-moved/</link><pubDate>Mon, 30 Sep 2013 08:08:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2013/09/30/my-subversion-repo-moved/</guid><description>
&lt;p>Well, it didn't strictly move anywhere but my broadband IP address changed after re-DHCP. I used to use no-ip.com, but then I no longer really host anything on my home network, so I figured could save myself 20 bucks as I didn't think I needed it anymore. Then I went to check in some old code to an old svn repo (that's another story) and of course it failed (and luckily for me, no bad guy had a repo sitting on the old ip!) Anyway, this is easily fixed by first checking the URL of the working copy and then switching it with the svn switch command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>server:~/svn/work$ svn info
&lt;span class="ln"> 2&lt;/span>Path: .
&lt;span class="ln"> 3&lt;/span>Working Copy Root Path: /home/mark/svn/pyf
&lt;span class="ln"> 4&lt;/span>URL: https://123.45.56.78/svn/pyf
&lt;span class="ln"> 5&lt;/span>Repository Root: https://123.45.56.78/svn/pyf
&lt;span class="ln"> 6&lt;/span>Repository UUID: 7e254e78-910f-47b9-b796-8845927be892
&lt;span class="ln"> 7&lt;/span>Revision: &lt;span class="m">31&lt;/span>
&lt;span class="ln"> 8&lt;/span>Node Kind: directory
&lt;span class="ln"> 9&lt;/span>Schedule: normal
&lt;span class="ln">10&lt;/span>Last Changed Author: mark
&lt;span class="ln">11&lt;/span>Last Changed Rev: &lt;span class="m">3&lt;/span>
&lt;span class="ln">12&lt;/span>Last Changed Date: 2013-02-05 14:15:13 +0000 &lt;span class="o">(&lt;/span>Tue, &lt;span class="m">05&lt;/span> Feb 2013&lt;span class="o">)&lt;/span>
&lt;span class="ln">13&lt;/span>server:~/svn/work$ svn switch --relocate https://123.45.56.78/svn/pyf &lt;span class="se">\
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="se">&lt;/span>https://231.1.2.3/svn/pyf
&lt;span class="ln">15&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Getting VIM Powerline Working with Putty</title><link>https://purplecarrot.co.uk/2013/09/09/getting-vim-powerline-working-with-putty/</link><pubDate>Mon, 09 Sep 2013 22:06:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2013/09/09/getting-vim-powerline-working-with-putty/</guid><description>
&lt;p>After using vim and vi for more years than I care to remember, I came across the &lt;a href="https://github.com/Lokaltog/powerline">vim powerline plugin&lt;/a> for the first time today. What an excellent vim statusline, and now I've been using it myself, I can see why it's so popular (that's a relative term - as in popular for a vim extensions! )&lt;/p>
&lt;p>Following the &lt;a href="https://powerline.readthedocs.org/en/latest/installation/linux.html#installation-linux">installation documentation&lt;/a>, and thanks to &lt;a href="Pathogen">Pathogen&lt;/a> it was very straight forward to setup. After installation in my bundle directory, I simply switched Putty to UTF-8 and then added the following lines to my .vimrc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">rtp&lt;/span>&lt;span class="o">+=&lt;/span>~/.vim/bundle/powerline/powerline/bindings/vim
&lt;span class="ln">2&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">encoding&lt;/span>&lt;span class="o">=&lt;/span>utf-8
&lt;span class="ln">3&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">laststatus&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>..and then it was all working nicely in Linux gnome-terminal.&lt;/p>
&lt;p>However, when I came to using the same setup with Putty from Windows 7 machine (I have no choice, the firm I work for doesn't allow connection of a non-firm owned device to the network, so no connecting my Mac or Linux laptop here!), the character set was all screwed up. This is because powerline uses custom glyphs in the status bar and the MS Win 7 supplied Consolas font doesn't include those glyphs.&lt;/p>
&lt;p>Unfortunately, my Win 7 machine doesn't have a full development environment, so &lt;a href="https://powerline.readthedocs.org/en/latest/fontpatching.html">fontpatching&lt;/a> the Consolas font I use (as instructed to do in Linux/Mac OS X) was not an [easy] option. Luckily, I found there were already Consolas patched fonts around other people had made available. I first tried &lt;a href="https://github.com/Lokaltog/powerline-fonts/blob/master/Inconsolata/Inconsolata%20for%20Powerline.otf">Inconsolata for Powerline&lt;/a> as this was what's in the powerline repo and what the server and my Linux workstation used, but though fine in Linux, that just didn't look pretty in Putty. Next, I found posts referencing these &lt;a href="https://github.com/eugeneching/consolas-powerline-vim">patched Consolas&lt;/a> fonts, but after installation, it still wasn't displaying the correct characters. Being a bit of a vim plugin amateur, I checked and double-checked settings but to no avail.&lt;/p>
&lt;p>Then I came across some comments about the new (rewritten in Python) powerline plugin not using the same codes as the old powerline. By this time, I just wanted it working. This was one of those slight 10min deviations that was making me forget what I was originally doing. Enter cut and paste and the perl one-liner.&lt;/p>
&lt;p>I used charmap to lookup the UTF-8 character codes, and then printed them to the terminal. Yippee! This at least confirmed my terminal, fonts and putty were correctly setup to display the characters, so the problem wasn't in either of these areas. So I looked at the default powerline config.json, and confirmed that it wasn't displaying the characters I was expecting to see. So next I &lt;a href="https://powerline.readthedocs.org/en/latest/configuration.html">configured a local config.json&lt;/a>
and simply cut and paste the characters output from the perl one-liner and pasted them into the config.json in my home directory.&lt;/p>
&lt;p>And voila...a working vim powerline plugin on Linux from Putty on Win7. Now I know this is not the right solution, and normally curiosity would force me get to the bottom of this and understand what was wrong, but having already spent an hr reading about the plugin and comments and dead ends refering to the old non-python version of the plugin, this got me a working powerline in Windows and so I'm happy with that. I just had to have those cute triangles in my menu bar - and no, ugly chars was not an option :-)&lt;/p>
&lt;p>Getting SyntaxHighlighter to display these glyphs is certainly not something I want to spend 2 minutes investigating at the moment, so instead a screenshot of the perl one-liner and the changes to config.json:&lt;/p>
&lt;p>&lt;img src="https://purplecarrot.co.uk/images/posts/powerlineputty.png" alt="Glyph icons">&lt;/p></description></item></channel></rss>