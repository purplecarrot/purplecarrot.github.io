<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Purplecarrot</title><link>https://purplecarrot.co.uk/tags/security/</link><description>Recent content in Security on Purplecarrot</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 03 Dec 2015 18:11:00 +0000</lastBuildDate><atom:link href="https://purplecarrot.co.uk/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Verifying TLS certificates in Python</title><link>https://purplecarrot.co.uk/post/archive/2015-12-03-verifying-tls-certificates-in-python/</link><pubDate>Thu, 03 Dec 2015 18:11:00 +0000</pubDate><guid>https://purplecarrot.co.uk/post/archive/2015-12-03-verifying-tls-certificates-in-python/</guid><description>
&lt;p>All too often people I see Python code using the requests module to query an API that just bypass TLS verification (i.e it sets &lt;code>verify=False&lt;/code> in the requests function calls). On RedHat Linux and derivatives, you can simply set this to &lt;code>verify=/etc/pki/tls/certs/ca-bundle.crt&lt;/code> and your Python code will then automatically use any system CA certs are part of TLS verification.&lt;/p>
&lt;p>If like me, the environment you work in has a private Root CA that even requires and issues certs to internal services on an internal private network, you can really easily add this root CA cert (and any intermediate CA certs you might want to trust) to the systems cert chain:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># cp mycompany-root-ca.crt /etc/pki/ca-trust/source/anchors&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># /usr/bin/update-ca-trust&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But perhaps you work on regulated systems where you don't have privileged root access? In that case, you can set the shell environment variable &lt;code>REQUESTS_CA_BUNDLE=$HOME/mycert.crt&lt;/code>.&lt;/p>
&lt;p>I can relate to the fact that sometimes we just want to get the code written as quickly as possible, but it doesn't have to be difficult and it's worth getting in the habit of leaving TLS verification turned on.&lt;/p></description></item><item><title>OpenSSL Command Line Quick Reference</title><link>https://purplecarrot.co.uk/2014/04/24/openssl-command-line-quick-reference/</link><pubDate>Thu, 24 Apr 2014 15:55:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2014/04/24/openssl-command-line-quick-reference/</guid><description>
&lt;p>Is there anybody in the IT industry that wasn't doing something with openssl in April? &lt;a href="http://heartbleed.com/">&lt;/a> I don't use the openssl command line utility that often, but last week it reminded me that openssl command line tool is pretty comprehensive and has some nice features. I thought on this occasion I'd record the most useful ones so that next time I don't have to look them up again!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># Show Certificate Info&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ openssl x509 -text -in server.cert
&lt;span class="ln"> 3&lt;/span>$ openssl md5 server.cert
&lt;span class="ln"> 4&lt;/span>$ openssl sha1 server.cert
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># Confirming openssl build info&lt;/span>
&lt;span class="ln"> 7&lt;/span>openssl version -a
&lt;span class="ln"> 8&lt;/span>OpenSSL 1.0.1e-fips &lt;span class="m">11&lt;/span> Feb &lt;span class="m">2013&lt;/span>
&lt;span class="ln"> 9&lt;/span>built on: Tue Apr &lt;span class="m">8&lt;/span> 00:29:11 UTC &lt;span class="m">2014&lt;/span>
&lt;span class="ln">10&lt;/span>platform: linux-x86_64
&lt;span class="ln">11&lt;/span>options: bn&lt;span class="o">(&lt;/span>64,64&lt;span class="o">)&lt;/span> md2&lt;span class="o">(&lt;/span>int&lt;span class="o">)&lt;/span> rc4&lt;span class="o">(&lt;/span>16x,int&lt;span class="o">)&lt;/span> des&lt;span class="o">(&lt;/span>idx,cisc,16,int&lt;span class="o">)&lt;/span> idea&lt;span class="o">(&lt;/span>int&lt;span class="o">)&lt;/span> blowfish&lt;span class="o">(&lt;/span>idx&lt;span class="o">)&lt;/span>
&lt;span class="ln">12&lt;/span>compiler: gcc -fPIC -DOPENSSL_PIC -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -DKRB5_MIT -m64 -DL_ENDIAN -DTERMIO -Wall -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> -fexceptions -fstack-protector --param&lt;span class="o">=&lt;/span>ssp-buffer-size&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span> -grecord-gcc-switches -m64 -mtune&lt;span class="o">=&lt;/span>generic -Wa,--noexecstack -DPURIFY -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM
&lt;span class="ln">13&lt;/span>OPENSSLDIR: &lt;span class="s2">&amp;#34;/etc/pki/tls&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>engines: dynamic
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1"># Generate hashed passwords (for example, for Anaconda)&lt;/span>
&lt;span class="ln">17&lt;/span>openssl passwd -1 mysecretword
&lt;span class="ln">18&lt;/span>&lt;span class="nv">$1$utlS7bht$VLMQrtHnPU0mkSO&lt;/span>/Kpzh/.
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1"># Directory complied in and used to search for openSSL files (--openssldir)&lt;/span>
&lt;span class="ln">21&lt;/span>openssl version -d
&lt;span class="ln">22&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I tend to use commercial SSL certificates or ones from my company's internal CA. However, I found this text file in my home directory which I'm recording here for next time because it's a very easy quick reference for generating a self signed certificate:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># Generate new private key&lt;/span>
&lt;span class="ln"> 2&lt;/span>openssl genrsa -aes256 -out my.key &lt;span class="m">4096&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># Generate new certificate request&lt;/span>
&lt;span class="ln"> 5&lt;/span>openssl req -new -key my.key -out my.csr
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># Sign certificate&lt;/span>
&lt;span class="ln"> 8&lt;/span>openssl x509 -req -days &lt;span class="m">3650&lt;/span> -in my.csr -signkey my.key -out my.crt
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># Remove cert password&lt;/span>
&lt;span class="ln">11&lt;/span>openssl rsa -in my.key -out my.key
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>