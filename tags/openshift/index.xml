<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenShift on Purplecarrot</title><link>https://purplecarrot.co.uk/tags/openshift/</link><description>Recent content in OpenShift on Purplecarrot</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 30 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://purplecarrot.co.uk/tags/openshift/index.xml" rel="self" type="application/rss+xml"/><item><title>Breaking into your OpenShift Cluster</title><link>https://purplecarrot.co.uk/post/2021-10-30-breaking_into_your_openshift_cluster/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>https://purplecarrot.co.uk/post/2021-10-30-breaking_into_your_openshift_cluster/</guid><description>
&lt;p>Of course, this really shouldn't happen right? You're a responsible IT professional, and your OpenShift cluster is configured with multiple authentication methods, and a secure backup of a &lt;code>kubeconfig&lt;/code> file with the system:admin user certificates for passwordless login? Except sometimes it does.&lt;/p>
&lt;p>In my day job, we have a small lab OCP cluster running on vSphere that might not get used for weeks or sometimes months. The OpenShift nodes that make up the OCP cluster sometimes get automatically powered down and left off in that powered off state.&lt;/p>
&lt;p>Yesterday, I came to use this cluster for the first time again after quite a long period and found that I was unable to login with a standard LDAP user account with cluster-admin credentials that I would normally use. In addition, my admin &lt;code>kubeconfig&lt;/code> (the one generated by openshift-installer for the original installation), had very old pre-rotation CA certs or something and hadn't been used for a while. Attempting to use it just gave x509 errors and so it seemed unusable. This has happened a couple of times now over the years, and I believe it's related to it being an IPI cluster and certificate rotation issues from the cluster being powered down for long periods. Before looking at the root cause, I'm just writing down the recovery procedure I used for next time!&lt;/p>
&lt;p>So with no standard OAUTH authentication method available, I went back trying to use the original kubeconfig from the installation of the cluster.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span> $ export KUBECONFIG=auth/kubeconfig
&lt;span class="ln">2&lt;/span> $ oc get nodes
&lt;span class="ln">3&lt;/span> Unable to connect to the server: x509: certificate signed by unknown authority
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To try and understand more about what was happening, I added &lt;code>--insecure-skip-tls-verify=true&lt;/code>, and the &lt;code>--loglevel=10&lt;/code> options to the command line, but I could see that a goroutine stack trace was immediately output after the x509 error message above.&lt;/p>
&lt;p>As any experienced senior engineer will know, the first place to go for solving any technical problem is a good Google or StackOverflow search. Unfortunately StackOverflow threw up a lot of articles that were old, or weren't quite right and not what I was looking for.&lt;/p>
&lt;p>Unsurprisingly - this being OpenShift - the best results were found in the &lt;a href="https://access.redhat.com/search/#/">RedHat Knowledgebase&lt;/a>. The KB articles &lt;a href="https://access.redhat.com/solutions/4505101">error: x509 certificate signed by unknown authority when logging in OpenShift 4 using the installation kubeconfig file&lt;/a> and &lt;a href="https://access.redhat.com/solutions/5286371">How to re create kubeconfig from scratch for system:admin user in OpenShift 4&lt;/a> looked promising, but both required existing access to the cluster to recreate them, which I didn't have because standard authentication methods were not working.&lt;/p>
&lt;p>I knew that all the certs I needed were on the cluster nodes themselves, but these systems were running RedHat CoreOS. RedHat CoreOS is based on RedHat Enterprise Linux, but designed very much as an appliance. It's not expected to be managed by a human sysadmin - it has disabled root account, doesn't allow passwordless logins and its OS configuration is managed by the MachineConfigOperator function of OpenShift. The next problem was that (for reasons of this being a lab and the cluster being built by a colleague) the SSH key for the coreos user used for the installation wasn't available to me either :-) I did however, have access to the vSphere console of these VMS. There was no option, I had break my way in and get those certs.&lt;/p>
&lt;p>The first thing was to boot the system to single user, reset the root password so I could login on the console. I've done this thousands of times over the years on many different versions of Linux and flavours of Linux, but interestingly this was more complicated on CoreOS (because of the way CoreOS works, and so it's not normally required). However, I did eventually get in and then I was able to locate the files I needed.&lt;/p>
&lt;p>So all the secrets needed to run kube-apiserver are found in &lt;code>/etc/kubenetes/static-pod-resources/kube-apiserver-certs&lt;/code>. In particular, the node-kubeconfigs/ directory has mulitple kubeconfig files, one of which was called &lt;code>lb-int.kubeconfig&lt;/code>. When I set my KUBECONFIG environment variable to point to this file, I was then able to issue oc commands to the cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span> # cd /etc/kubenetes/static-pod-resources/kube-apiserver-certs/secrets/node-kubeconfigs
&lt;span class="ln">2&lt;/span> # export KUBECONFIG=$(pwd)/lb-int.kubeconfig
&lt;span class="ln">3&lt;/span> # oc get nodes
&lt;span class="ln">4&lt;/span> &amp;lt;lots of nodes with STATUS NotReady&amp;gt;
&lt;span class="ln">5&lt;/span> # oc get pods -A | grep -e Running
&lt;span class="ln">6&lt;/span> &amp;lt;lots of pods in ContainerCreating or Pending
&lt;span class="ln">7&lt;/span> # oc get csr -o name | xargs oc adm certificate approve
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I found that half the nodes were in state &lt;code>NotReady&lt;/code>, and so the oauth-openshift containers were not &lt;code>Running&lt;/code>. This in turn was because there were a bunch of unapproved CSRs. Once these were approved, the nodes became &lt;code>Ready&lt;/code> and the OAuth authentication pods were able to start up and the cluster recovered itself in the usual way. I was then able to login normally again and recreate a backup &lt;code>kubeconfig&lt;/code>!&lt;/p></description></item><item><title>Does Alpine resolve DNS properly?</title><link>https://purplecarrot.co.uk/post/2021-09-04_does_alpine-resolve_dns_properly/</link><pubDate>Sat, 04 Sep 2021 08:51:20 +0100</pubDate><guid>https://purplecarrot.co.uk/post/2021-09-04_does_alpine-resolve_dns_properly/</guid><description>
&lt;p>To anybody who has ever used containers, Alpine is a well known base operating system layer to many popular and widely used container images in use today. By design, it's a cut down minimal OS layer using the excellent &lt;a href="https://www.busybox.net/">busybox&lt;/a> and &lt;a href="https://musl.libc.org/">musl libc&lt;/a> C library. By using these alternatives to GNU Coreutils and GNU glibc C Library, it provides a base OS container layer that allows you to build and run very small Linux containers.&lt;/p>
&lt;p>This week I was asked to look at a problem where an application team could not resolve a key DNS name used on our internal network when running their application within the container - their first thought was a problem with the OpenShift/Kubernetes environment where the container was running.&lt;/p>
&lt;p>Unfortunately, the company I work for doesn't like us to disclose internal proprietary network information, so for the purposes of the post, let's say the DNS name being queried is &lt;code>vis.company.com&lt;/code> (very important service). All IPs and some other data in the extracts below have been manually changed to private RFC1918 addresses or redacted too.&lt;/p>
&lt;h2 id="basic-troubleshooting">Basic Troubleshooting&lt;/h2>
&lt;p>The first thing to do was to perform my own DNS lookup of &lt;code>vis.company.com&lt;/code>. This worked fine from both my Linux workstation and Windows laptop.&lt;/p>
&lt;p>Now what made this problem interesting was that the application running in the container was able to resolve all other DNS entries that it was required to in order to function(eg &lt;code>a.company.com&lt;/code>, &lt;code>b.company.com&lt;/code>), but it couldn't resolve this one crucial DNS entry &lt;code>vis.company.com&lt;/code>. When you connected to a shell running inside the container and ran &lt;code>getent hosts vis.company.com&lt;/code> it simply returned nothing at all, and exited with exit code 2.&lt;/p>
&lt;h2 id="inside-the-container">Inside the Container&lt;/h2>
&lt;p>So how do you go about troubleshooting a problem like this from within a container? In a standard OS, you can simply use the standard tools in your sysadmin toolkit - ss (lsof/netstat), dig, strace, tcpdump, nmap, etc - but inside a container these are unlikely to be available by default (and some containers don't even include a minimal unix shell even). I have a pre-built container I use for situations like this that I then add as a sidecar in the pod I'm troubleshooting. Then by setting &lt;code>shareProcessNamespace: true&lt;/code> in the podspec, it will allow you to easily debug and strace processes running inside the first container from the sidecar.&lt;/p>
&lt;h2 id="dns-query">DNS Query&lt;/h2>
&lt;p>So strace'ing the DNS queries I could see the &lt;code>socket()&lt;/code> and &lt;code>bind()&lt;/code> calls, followed by receiving a response from the DNS server. However, this response was empty. Something weird was happening, because running the same command on a standard Linux host you could see 100s of lines more of system calls and a good DNS response with multiple A records was returned.&lt;/p>
&lt;p>So the next step was to use tcpdump and capture a packet trace of the DNS query. Below is the relevant section from that pcap that shows the DNS query:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>18:00:27.376761 IP (tos 0x0, ttl 64, id 32569, offset 0, flags [DF], proto UDP (17), length 68)
&lt;span class="ln">2&lt;/span> 10.96.10.99.43507 &amp;gt; 10.96.0.10:domain: 19977+ A? vis.company.com. (40)
&lt;span class="ln">3&lt;/span>18:00:27.386585 IP (tos 0x0, ttl 64, id 24288, offset 0, flags [DF], proto UDP (17), length 79)
&lt;span class="ln">4&lt;/span> 10.96.0.10.domain &amp;gt; 10.96.10.99.43507: 19977| 0/0/1 (51)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So what does this tell us?&lt;/p>
&lt;ol>
&lt;li>This is standard UDP DNS query (id 19977) to query the IPv4 record &lt;code>vis.company.com&lt;/code>&lt;/li>
&lt;li>The DNS server response comes from &lt;code>10.96.0.10&lt;/code>, which is the Kubernetes &lt;code>Service&lt;/code> address for CoreDNS.&lt;/li>
&lt;li>A DNS response was received, but no DNS records were in it (&lt;code>0/0/1&lt;/code> = 0 answer records, 0 nameservers and 1 additional record which is the query address itself)&lt;/li>
&lt;li>The &lt;code>|&lt;/code> character after the 19977 id indicates that the TC (TrunCation) bit is set on this packet.&lt;/li>
&lt;/ol>
&lt;p>The most interesting of these is the last. The TC bit is used when the DNS response the DNS server wants to send to the client is longer than the 512bytes available to it in a UDP packet (see &lt;a href="https://datatracker.ietf.org/doc/html/rfc1035">RFC1035&lt;/a> for more information.)&lt;/p>
&lt;p>This is a signal to the DNS resolver client that it needs to switch from a standard UDP DNS query and do a new TCP DNS query instead - but in both the strace and tcpdump output of the application running the the Alpine container, the resolver query exited immediate after receiving this TC UDP packet from the DNS server.&lt;/p>
&lt;p>I expected this to be a bug, but it turned out that this is a &lt;a href="https://wiki.musl-libc.org/functional-differences-from-glibc.html">functional difference between musl libc and glibc&lt;/a> and is by design. The musl libc author states that he intentionally didn't support TCP as felt it would be better for performance and UX reasons:&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">My choice not to do TCP in musl&amp;#39;s stub resolver was based on an interpretation that truncated results are not just acceptable but better ux - not only do you save major round-trip delays to DNS but you also get a reasonable upper bound on # of addrs in result.&lt;/p>&amp;mdash; Rich Felker (@RichFelker) &lt;a href="https://twitter.com/RichFelker/status/994629795551031296?ref_src=twsrc%5Etfw">May 10, 2018&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>This is true, and a valid point. However, it means that this particular app would never work when running in a container based on Alpine. Sometimes predictable functionality is more important.&lt;/p>
&lt;p>There are various other ways this could have been made to work. Perhaps making the DNS entry smaller - which was indeed unnecessarily large - would indeed be a better fix, but unfortunately this wasn't a practical option as the DNS entry wasn't under this team's control.&lt;/p>
&lt;p>Instead, the quickest fix was to rebuild the application into a new container image using the RedHat UBI8 image as a base layer instead of Alpine. This image uses glibc resolver, and then the app then ran fine, in the same way as it did on the RedHat Linux 8 host where it had ran before being containerized.&lt;/p></description></item></channel></rss>