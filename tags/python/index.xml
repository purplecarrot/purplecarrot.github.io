<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Purplecarrot</title><link>https://purplecarrot.co.uk/tags/python/</link><description>Recent content in Python on Purplecarrot</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 03 Dec 2015 18:11:00 +0000</lastBuildDate><atom:link href="https://purplecarrot.co.uk/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Verifying TLS certificates in Python</title><link>https://purplecarrot.co.uk/post/archive/2015-12-03-verifying-tls-certificates-in-python/</link><pubDate>Thu, 03 Dec 2015 18:11:00 +0000</pubDate><guid>https://purplecarrot.co.uk/post/archive/2015-12-03-verifying-tls-certificates-in-python/</guid><description>
&lt;p>All too often people I see Python code using the requests module to query an API that just bypass TLS verification (i.e it sets &lt;code>verify=False&lt;/code> in the requests function calls). On RedHat Linux and derivatives, you can simply set this to &lt;code>verify=/etc/pki/tls/certs/ca-bundle.crt&lt;/code> and your Python code will then automatically use any system CA certs are part of TLS verification.&lt;/p>
&lt;p>If like me, the environment you work in has a private Root CA that even requires and issues certs to internal services on an internal private network, you can really easily add this root CA cert (and any intermediate CA certs you might want to trust) to the systems cert chain:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># cp mycompany-root-ca.crt /etc/pki/ca-trust/source/anchors&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># /usr/bin/update-ca-trust&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But perhaps you work on regulated systems where you don't have privileged root access? In that case, you can set the shell environment variable &lt;code>REQUESTS_CA_BUNDLE=$HOME/mycert.crt&lt;/code>.&lt;/p>
&lt;p>I can relate to the fact that sometimes we just want to get the code written as quickly as possible, but it doesn't have to be difficult and it's worth getting in the habit of leaving TLS verification turned on.&lt;/p></description></item><item><title>Generating a RPM changelog using git log</title><link>https://purplecarrot.co.uk/2015/11/19/generating-rpm-changelog-from-git-log/</link><pubDate>Thu, 19 Nov 2015 16:11:00 +0000</pubDate><guid>https://purplecarrot.co.uk/2015/11/19/generating-rpm-changelog-from-git-log/</guid><description>
&lt;p>I use python setuptools bdist_rpm to build RPMs from the code in my git repositories and today I updated my automated build script (a wrapper around python setup.py to run pre-requisite functions) to generate an RPM changelog from the git log of the repository hosting the package and then automatically include this in the rpm being built. A search on github shows there are a few python scripts and pypi modules to do this, but I wondered if I could just use git log.&lt;/p>
&lt;p>It seems you can. The &lt;a href="http://fedoraproject.org/wiki/Packaging:Guidelines#Changelogs">Fedora packaging&lt;/a> describe the format of the changelog file. They also appear to recommend not using your vcs changelog as your changelog messages would be too terse for the users. However, in my case they're not and it's exactly what they want&lt;/p>
&lt;p>With git log you can use the --pretty option to format the output of the commit log. You select the appropriate formats from git &lt;a href="http://git-scm.com/docs/pretty-formats">pretty-formats&lt;/a> to make it output the git log in RPM changelog format. Unfortunately though, none of the date formats available are quite the correct format for an RPM changelog. It expects just the date of the change and doesn't want (nor can it handle) the time or the timezone offset of the git commit. The way I addressed this was to pipe the git log output through perl to remove those date fields. It would be nicer if git log had date +%H:%M:%S type formatting, but it doesn't, so we add the perl oneliner with a suitable regex to remove the parts we don't want.&lt;/p>
&lt;p>Also rpm-build (or perhaps setuptools) doesn't like any blank lines in the changelog file, so we remove those with perl -00 option. The contents of the generated changelog file (not the filename) are then passed into the setup.py --changelog option. The double quotes ensure the whitespace is preserved.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>$ git log --pretty&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;tformat:* %cd %an &amp;lt;%ae&amp;gt; (%h)%n- %s%b%n&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="p">|&lt;/span> perl -lap00e &lt;span class="s1">&amp;#39;~s/(\d{2]:){2}\d{2} (\d{4}) [+-]\d{4}/$2/g&amp;#39;&lt;/span> &amp;gt; changelog
&lt;span class="ln">3&lt;/span>$ python setup.py bdist_rpm --changelog&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>ltchangelog&lt;span class="k">)&lt;/span>&lt;span class="s2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Debugging Flask applications running under Apache mod_wsgi</title><link>https://purplecarrot.co.uk/2015/07/21/debugging-flask-applications-running/</link><pubDate>Tue, 21 Jul 2015 10:46:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2015/07/21/debugging-flask-applications-running/</guid><description>
&lt;p>I have recently been developing a new python web application that uses the Flask framework. Whilst running standalone, it was working fine. Then I went to setup the UAT environment which is running under Apache using mod_wsgi. I've done this many times before without any problems. However, this time I was getting a &amp;quot;500 Internal Server Error&amp;quot; in my browser. I opened up the Apache error_log expecting a stack trace error in there that will pinpoint where my typo or forgotten config option that I need to fix is, but no. Nothing. It just said &amp;quot;Loading WSGI script&amp;quot; and implied everything was working ok.&lt;/p>
&lt;p>Then I read that mod_wsgi discards all stdout and as I realised my error was early in the startup process, I wasn't able to see the error message or stack trace I needed to debug the problem. To see this error, you can add basic logging to stderr in your WSGI script to send the missing errors to stderr and therefore on to Apache error_log. In my case the error was simply an IOError exception because of a missing file I had forgot to copy over (yes, I will add that to my tests!)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">basicConfig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">myapplication&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">app&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">application&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Writing OpenStack Hooks</title><link>https://purplecarrot.co.uk/2015/04/23/writing-openstack-hooks/</link><pubDate>Thu, 23 Apr 2015 18:00:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2015/04/23/writing-openstack-hooks/</guid><description>
&lt;p>I've recently been writing OpenStack Nova hooks for integration of newly deployed OpenStack nova instances with our existing infrastructure systems. Though the &lt;a href="http://developer.openstack.org/">OpenStack Developer Documentation&lt;/a> is very good, there is not that much documentation out there on real world end-user experiences of writing nova hooks. In this post, I will document my experiences in writing a nova hook for the first time and may be it will help others approaching the same task.&lt;/p>
&lt;h2 id="summary-and-goals">Summary and Goals&lt;/h2>
&lt;p>Linux or Windows VMs provisioned by OpenStack for use in my firm must be registered with a number of other &amp;quot;Enterprise&amp;quot; systems external to the OpenStack core components. For example, an inventory system, an LDAP directory, a separate corporate IPAM solution (DNS) as well as security audit systems. Generally, the key for recording this data in the external system is either the new instance's hostname, IP address or mac address. This integration must be done at the point of instance/vm creation or deletion (because in some cases the registration event must occur before the new instance has booted) and so OpenStack nova hooks work well for this.&lt;/p>
&lt;h2 id="what-are-openstack-hooks">What are OpenStack Hooks?&lt;/h2>
&lt;p>OpenStack hooks allow you - as the system integrator - to write custom python code to execute any business logic or custom logic and then have this code execute when the relevant OpenStack function is called.&lt;/p>
&lt;p>You write your code as a standard python module and using setuptools for packaging and deployment, just as if you were writing any other python module. You then simply define entry points and your code will get executed.&lt;/p>
&lt;p>Your code can be setup to run either before the hooked function (pre hook) or after (post hook) the hooked function. At the time of writing, nova only has a handful of hooks declared but I would imagine that in time hooks will be declared across many more methods and across many OpenStack components.&lt;/p>
&lt;p>Currently with the version of OpenStack I'm working with, you could add custom code to be run on nova create_instance, delete_instance or resize_instance method and this would get executed when that method is called internally as part of those nova processes.&lt;/p>
&lt;p>You then create your package and define the methods you want to get called alongside the OpenStack nova methods where you want them to run. Here is an example of the setup.py binding custom package methods to nova create and delete instances:&lt;/p>
&lt;h2 id="setuppy">setup.py&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;myfirmshooks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;My Firms Hooks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">author&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Me&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">entry_points&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s1">&amp;#39;nova.hooks&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s1">&amp;#39;create_instance=myfirmshooks.nova:CreateInstance&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="s1">&amp;#39;delete_instance=myfirmshooks.nova:DeleteInstance&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mynovahookpy">mynovahook.py&lt;/h2>
&lt;p>The code is actually very simple indeed. You add the code you want to run inside the post of pre method of the class. Because this code runs inside nova-api, you have access to lots of information inside the args and kwargs passed into the function which can be used inside your code. For example, the uuid, name, flavor and much more are all available with very little efforts for your code to use.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MyNovaHook&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34; object for running custom code &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">pre&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Tasks that run before the instance is created&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Tasks that run after the instance is created&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;REST requests for interaction with external systems&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="scale">Scale&lt;/h2>
&lt;p>There isn't much information out there on customising OpenStack workflow like this. There is lots of information about using ansible, puppet, chef and similar tools for &lt;em>post&lt;/em> build configuration of the operating system inside instance, but less information on running code that you want to run on behalf of the instance, but which cannot or you do not wish to run inside the instance. However, it should be noted that code running inside the post hook will block and/or error the instance creation. It maybe that a message bus approach would scale better with a short simple hook that puts a message on a bus and a secondary daemon running on the system that consumes and acts on that message and I may look at implementing that in future.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>The following pages were useful when I started out writing nova hooks.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>OpenStack Developer Documentation on Hooks&lt;br>
&lt;a href="http://docs.openstack.org/developer/nova/devref/hooks.html">http://docs.openstack.org/developer/nova/devref/hooks.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Python Setuptools Documentation&lt;br>
&lt;a href="http://pythonhosted.org/setuptools/index.html">http://pythonhosted.org/setuptools/index.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lars Kellogg-Stedman's Blog Entry on Writing Nova Hooks&lt;br>
&lt;a href="http://blog.oddbit.com/2014/09/27/integrating-custom-code-with-n/">http://blog.oddbit.com/2014/09/27/integrating-custom-code-with-n&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Python Setuptools and Building RPMs with Dependencies.</title><link>https://purplecarrot.co.uk/2015/04/07/python-setuptools-and-building-rpms/</link><pubDate>Tue, 07 Apr 2015 16:42:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2015/04/07/python-setuptools-and-building-rpms/</guid><description>
&lt;p>If you develop python modules for distribution, you likely use python setuptools. It's very useful and takes lots of the manual operations out of distributing python code and modules. I recently started going one step further and using the bdist_rpm setup.py command option to automatically build rpms for my python code and modules too. Unfortunately, I found a bug (on RHEL 6 version of setuptools at least) in that it doesn't appear the install_requires directive in setup.py is being read or used correctly.&lt;/p>
&lt;p>After adding &lt;em>install_requires=['requests']&lt;/em> to the setup.py file, the rpm spec file that &lt;em>python setup.py bdist_rpm&lt;/em> created did &lt;strong>NOT&lt;/strong> include the correct &lt;em>Requires:&lt;/em> line required to include the dependency in the RPM. I experimented with the argument supplied (eg python-requests/requests) and other such things, but was not able to build an RPM with the dependencies on the python-requests RPM that I wanted to include.&lt;/p>
&lt;p>After some playing and research, I was finally able to get it to generate an RPM with the correct dependency on python-requests by creating and using this custom setup.cfg file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; setup.cfg
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="s">[bdist_rpm]
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s">requires = python-requests &amp;gt;= 1.1
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="s">no-autoreq = yes
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;span class="ln">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The other line in there (&lt;em>no-autoreq&lt;/em>) tells setup.py not to analyse your code for dependencies and include those in the RPM too. I added this because by default, the generated RPM had tied a dependency to python 2.6 (RHEL 6) but I wanted an RPM generated that would run on python 2.7 (RHEL 7) too so adding this flag removes any dependency on a specific python version&lt;/p></description></item><item><title>Build a Python Version Agnostic RPM For Your Python Module</title><link>https://purplecarrot.co.uk/2015/04/02/build-rpm-for-your-python-module/</link><pubDate>Thu, 02 Apr 2015 15:52:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2015/04/02/build-rpm-for-your-python-module/</guid><description>
&lt;p>I often use the python setup.py bdist_rpm command on RHEL to build RPMs of the python modules I'm developing. This makes it easy for me to distribute my module via the yum repos internally at the company I work for. At my company, most of our production servers are currently RHEL 6, but we are starting to deploy RHEL 7. When I took one of my recently built RPMs of a python module (that runs under python 2.6 and python 2.7), I was surprised to find that it did not install on RHEL7 because of missing dependencies. It turns out, that my RPMs &amp;quot;required&amp;quot; python 2.6 from RHEL 6 (RHEL 7 moves to python 2.7 as default). &amp;lt;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>$ rpm -qpR python-mymodule-2.8-1.noarch.rpm
&lt;span class="ln">2&lt;/span>/usr/bin/python
&lt;span class="ln">3&lt;/span>python&lt;span class="o">(&lt;/span>abi&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> 2.6
&lt;span class="ln">4&lt;/span>python-requests
&lt;span class="ln">5&lt;/span>rpmlib&lt;span class="o">(&lt;/span>CompressedFileNames&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">=&lt;/span> 3.0.4-1
&lt;span class="ln">6&lt;/span>rpmlib&lt;span class="o">(&lt;/span>PayloadFilesHavePrefix&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">=&lt;/span> 4.0-1
&lt;span class="ln">7&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even though I don't have a specific version of python listed in the requirements for the package, the rpmbuild called by setuptools automatically adds a dependency on the python version installed on the system I'm using. This is because when rpmbuild scans through my source, it then finds the shebang that points to #!/usr/bin/env python, which in turn finds the python 3.6 on the server where I build the RPM. Obviously, I could rebuild the rpm on a RHEL 7 host and it would then find python 2.7, but I don't want to have separate RPMs for different RHEL versions when the code is the same. I wanted to be able to produce an RPM for my python module and code that installs and runs on RHEL 6 and RHEL 7 (when the python code is tested to run under python 2.6+) Now this isn't particularly well documented, but I did a little digging and found that to do this, you can simply add the --no-autoreq option to setup.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>$ python setup.py bdist_rpm --no-autoreq
&lt;span class="ln">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will then tell bdist_rpm to add the &amp;quot;AutoReq: no&amp;quot; option to the spec file used to generate the RPM. RPM build will then see this and the resulting RPM will then no longer require a specific version of python.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>$ rpm -qpR python-mymodule-2.8-2.noarch.rpm
&lt;span class="ln">2&lt;/span>python-requests
&lt;span class="ln">3&lt;/span>rpmlib&lt;span class="o">(&lt;/span>CompressedFileNames&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">=&lt;/span> 3.0.4-1
&lt;span class="ln">4&lt;/span>rpmlib&lt;span class="o">(&lt;/span>PayloadFilesHavePrefix&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">=&lt;/span> 4.0-1
&lt;span class="ln">5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can then add the option to your setup.cfg file for the module, so that you don't forget it next time and inadvertently distribute a python version dependent module. &amp;lt;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>bdist_rpm&lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span>no-autoreq &lt;span class="o">=&lt;/span> yes
&lt;span class="ln">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Useful References:&lt;/p>
&lt;h1 id="rpm-automatic-dependencieshttpwwwrpmorgmax-rpm-snapshots1-rpm-depend-auto-dependhtml">&lt;a href="http://www.rpm.org/max-rpm-snapshot/s1-rpm-depend-auto-depend.html">RPM Automatic Dependencies&lt;/a>&lt;/h1></description></item><item><title>Named Groups in Python Regular Expressions</title><link>https://purplecarrot.co.uk/2013/09/11/named-groups-in-python-regular/</link><pubDate>Wed, 11 Sep 2013 10:14:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2013/09/11/named-groups-in-python-regular/</guid><description>
&lt;p>To anybody working with Unix and Linux systems, &lt;a href="http://en.wikipedia.org/wiki/Regular_expression">regular expressions&lt;/a> or regexes are extremely useful for fast pattern matching in scripts. First there were basic regexes now known as BREs as used by traditional Unix utilities like sed, and then came along the even more useful Perl Enhanced Regular Expressions. So useful were these, that many of the traditional GNU utilities in Linux were retrofitted with support for these Perl Compatible Regular Expressions (so ubiquitous are these PCREs now in GNU and OSS, that younger nix readers only familiar with Linux may assume the were always this good!)&lt;/p>
&lt;p>Anyway, to the point of this post. Whilst checking some syntax earlier, I came across &lt;a href="http://docs.python.org/2/howto/regex.html#non-capturing-and-named-groups">named groups&lt;/a>. I've never really stopped to read about these before. Traditionally (and in most code I come across), groups matched in regexes are captured with ( and ), and then &amp;quot;replayed&amp;quot; with $1, $2 (or \1 or \2 for sed, etc). This is fine when you're only trying to match 1 or 2 groups. But what happens when you have a hideously complicated match with 10+ matches. Editing and maintaining this is nightmare and fraught with problems. This is where named groups come in.&lt;/p>
&lt;p>How named groups work is best illustrated with a very simple example. Imagine a file like this, that is used to set shell variables that a command line utility picks up from the environment.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">DBSERVER&lt;/span>&lt;span class="o">=&lt;/span>dbserver.example.com
&lt;span class="ln">2&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">DBPORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2000&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">CITY&lt;/span>&lt;span class="o">=&lt;/span>London
&lt;span class="ln">4&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">COUNTRY&lt;/span>&lt;span class="o">=&lt;/span>UK
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now imagine I need to write a python app that needs to use those same variables without duplicating them in a second config file. An easy way to do this would be with the following code using normal numbered groups.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">regex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;export (\w+)=(.*)&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">settings&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;app.conf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">regex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">settings&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nb">print&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running this gives you a dictionary with a key for each shell variable that was read in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nt">&amp;#34;dbport&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;#34;country&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;UK&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;#34;city&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;London&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nt">&amp;#34;dbserver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;dbserver.example.com&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Switching to named groups, the functionally equivalent code could be written like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">regex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;export (?P&amp;lt;shellvar&amp;gt;\w+)=(?P&amp;lt;value&amp;gt;.*)&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">settings&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;app.conf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">regex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shellvar&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;shellvar&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">settings&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nb">print&lt;/span> &lt;span class="n">settings&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="n">shellvar&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is just an example. You probably don't &lt;strong>need&lt;/strong> to use named groups in this instance and there is probably a config file parsing module anyway, but it' a good illustration on named groups and numbered groups.&lt;/p>
&lt;p>Now my last thought on the matter is that I wonder if the reason I've never come across or used named groups before is because if I'm matching a hideously long string into more than half a dozen groups, I'd probably tackle the problem in another way (read more simple and readable) such as breaking the string down with split, etc. Regular expressions are great, but the complicated ones don't contribute well to code maintainability.&lt;/p></description></item><item><title>SimpleHTTPServer</title><link>https://purplecarrot.co.uk/2013/08/16/whilst-reading-about-basehttpserver/</link><pubDate>Fri, 16 Aug 2013 17:59:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2013/08/16/whilst-reading-about-basehttpserver/</guid><description>
&lt;p>Whilst reading about &lt;a href="http://docs.python.org/2/library/basehttpserver.html">BaseHTTPServer&lt;/a> class as mentioned in the last post, I also came across the very useful &lt;a href="http://docs.python.org/2/library/simplehttpserver.html">SimpleHTTPserver&lt;/a> which is most definitely worth recording as a one-liner. Everybody must have come across the situation where you're ssh'd into a headless server with no Apache installed or running on it, and you come across an HTML file you want to look at. You can read it with vi (or lynx!) but that's never really going to be that nice. As python is near-ubiquitous on all Linux installations these days, you can run this simple oneliner to view HTML docs on the system (or in fact any files you might want to view graphically instead of via a terminal?)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">share&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">doc&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">bash&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">3.2&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="n">python&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="n">SimpleHTTPServer&lt;/span> &lt;span class="mi">8000&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Serving&lt;/span> &lt;span class="n">HTTP&lt;/span> &lt;span class="n">on&lt;/span> &lt;span class="mf">0.0.0.0&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="mi">8000&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="mf">127.0.0.1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Aug&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2013&lt;/span> &lt;span class="mi">17&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">51&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">49&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="s2">&amp;#34;GET / HTTP/1.1&amp;#34;&lt;/span> &lt;span class="mi">200&lt;/span> &lt;span class="o">-&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Integrated Web Serving with BaseHTTPServer</title><link>https://purplecarrot.co.uk/2013/08/16/these-last-few-days-i-have-been-writing/</link><pubDate>Fri, 16 Aug 2013 17:49:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2013/08/16/these-last-few-days-i-have-been-writing/</guid><description>
&lt;p>These last few days I have been writing a command line reporting program at work. For Linux techs, formatted terminal output works great and is actually their preferred view. However, for managers, you simple must have the eye candy of a GUI. Normally in these situations, I would simply add CGI code and then bundle a simple Apache config to &lt;em>Include&lt;/em> along with the code. With this particular program, it could be run on any one of tens of thousands of servers we have, however it is only likely to be run for a short while to graphically review some data stored in JSON files on the server. The overhead of reconfiguring and restarting Apache, even though only a few commands, is probably too much in this particular scenario.&lt;/p>
&lt;p>Enter &lt;a href="http://docs.python.org/2/library/basehttpserver.html">BaseHTTPServer&lt;/a>. This includes classes that let your program become the webserver itself, negating the need to run a CGI script or framework under full blown Apache.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MyWebServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseHTTPServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">BaseHTTPRequestHandler&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">do_HEAD&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Content-type&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;text/html&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">end_headers&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">do_GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Content-type&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;text/html&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">end_headers&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wfile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Web Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wfile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">show_table&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">reportjson&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">/&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rootdir&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wfile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">show_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="ne">IOError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;Oops: &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">httpd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BaseHTTPServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HTTPServer&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="s1">&amp;#39;0.0.0.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="n">MyWebServer&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">httpd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">serve_forever&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="ne">KeyboardInterrupt&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">httpd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">server_close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">34&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, this obviously isn't going to replace your Apache installation (though I came across bugs in BaseHTTPServer where people were seemingly trying to!) but for development purposes and short lived web serving without affecting the running Apache server on your server, this is a very useful feature I am sure I will be using time and time again.&lt;/p></description></item><item><title>First Post</title><link>https://purplecarrot.co.uk/2011/04/27/first-post/</link><pubDate>Wed, 27 Apr 2011 21:06:00 +0100</pubDate><guid>https://purplecarrot.co.uk/2011/04/27/first-post/</guid><description>
&lt;p>Memory not as good as it used to be. Need to stop recording things in text files in my homedir and put them here where I can find them next time. Hopefully they may help you too.&lt;/p></description></item></channel></rss>