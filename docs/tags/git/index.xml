<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Purplecarrot</title>
    <link>https://purplecarrot.co.uk/tags/git/</link>
    <description>Recent content in Git on Purplecarrot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Oct 2015 16:31:00 +0000</lastBuildDate><atom:link href="https://purplecarrot.co.uk/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Recovering lost git commits (or undoing a git reset!)</title>
      <link>https://purplecarrot.co.uk/2015/10/28/recovering-lost-git-commits-or-undoing/</link>
      <pubDate>Wed, 28 Oct 2015 16:31:00 +0000</pubDate>
      
      <guid>https://purplecarrot.co.uk/2015/10/28/recovering-lost-git-commits-or-undoing/</guid>
      <description>
        
          &lt;p&gt;We have recently recruited lots of new staff at the firm where I work and they are all learning git for the first time (and believe it or not, for many, it is their first experience of any VCS). I was surprised today when one of these new staff approached me because he had lost a couple of hours work!&lt;/p&gt;
&lt;p&gt;The remote HEAD had changed quite a bit since his initial checkout, and he got himself into a bit of a mess pulling down changes and merging his local changes. To further compound the error, he did a git reset --hard HEAD~3, and then tried a few different git revert and git  reset commands to get it into the state he wanted! He asked me if there was an easy way to get these back (after he read git reset --hard is permanent and dangerous!).&lt;/p&gt;
&lt;p&gt;So we&#39;ve all lost work at some point in our lives, but I&#39;ve never managed to actually &lt;em&gt;lose&lt;/em&gt; work in DVCS. Fortunately, I remembered a git tutorial a while back where they had talked about the reflog. So I knew his commit was &amp;quot;there somewhere&amp;quot;, it just needed to be got back.&lt;/p&gt;
&lt;p&gt;It turns out this is actually very simple. You simply view your reflog and then hard reset back to the commit SHA you want (I had to update the output below as it contains proprietary information from my firm!)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;$ git reflog
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;a30a408 HEAD@&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;: commit: Revert &lt;span class=&#34;s2&#34;&gt;&amp;#34;XYZ&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;4149dbf HEAD@&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;: commit: 4149dbf.... updating HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;a6b3b59 HEAD@&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;2&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;: commit: a6b3b59.... updating HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;957745c HEAD@&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;3&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;: HEAD~2: updating HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;daa6d14 HEAD@&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;4&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;: HEAD~3: updating HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;ebc7042 HEAD@&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;5&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;: pull: Merge made by recursive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;635d7ff HEAD@&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;: commit: Last Good Commit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;$ git reset --hard 635d7ff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;$ git push -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So these reset commits are basically in the reflog as garbage. This revert could be done immediately, but these garbage commits will eventually be deleted (configuration variable gc.reflogExpire which defaults to 90 days). So you won&#39;t always be able to go back to them, but it is good for immediate recovery of errors, which is realistically the case when you will be able to use this.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Getting VIM Powerline Working with Putty</title>
      <link>https://purplecarrot.co.uk/2013/09/09/getting-vim-powerline-working-with-putty/</link>
      <pubDate>Mon, 09 Sep 2013 22:06:00 +0100</pubDate>
      
      <guid>https://purplecarrot.co.uk/2013/09/09/getting-vim-powerline-working-with-putty/</guid>
      <description>
        
          &lt;p&gt;After using vim and vi for more years than I care to remember, I came across the &lt;a href=&#34;https://github.com/Lokaltog/powerline&#34;&gt;vim powerline plugin&lt;/a&gt; for the first time today. What an excellent vim statusline, and now I&#39;ve been using it myself, I can see why it&#39;s so popular (that&#39;s a relative term - as in popular for a vim extensions! )&lt;/p&gt;
&lt;p&gt;Following the &lt;a href=&#34;https://powerline.readthedocs.org/en/latest/installation/linux.html#installation-linux&#34;&gt;installation documentation&lt;/a&gt;, and thanks to &lt;a href=&#34;Pathogen&#34;&gt;Pathogen&lt;/a&gt; it was very straight forward to setup. After installation in my bundle directory, I simply switched Putty to UTF-8 and then added the following lines to my .vimrc&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rtp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;~/.vim/bundle/powerline/powerline/bindings/vim
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf-8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;laststatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;..and then it was all working nicely in Linux gnome-terminal.&lt;/p&gt;
&lt;p&gt;However, when I came to using the same setup with Putty from Windows 7 machine (I have no choice, the firm I work for doesn&#39;t allow connection of a non-firm owned device to the network, so no connecting my Mac or Linux laptop here!), the character set was all screwed up.  This is because powerline uses custom glyphs in the status bar and the MS Win 7 supplied Consolas font doesn&#39;t include those glyphs.&lt;/p&gt;
&lt;p&gt;Unfortunately, my Win 7 machine doesn&#39;t have a full development environment, so &lt;a href=&#34;https://powerline.readthedocs.org/en/latest/fontpatching.html&#34;&gt;fontpatching&lt;/a&gt; the Consolas font I use (as instructed to do in Linux/Mac OS X) was not an [easy] option. Luckily, I found there were already Consolas patched fonts around other people had made available. I first tried &lt;a href=&#34;https://github.com/Lokaltog/powerline-fonts/blob/master/Inconsolata/Inconsolata%20for%20Powerline.otf&#34;&gt;Inconsolata for Powerline&lt;/a&gt; as this was what&#39;s in the powerline repo and what the server and my Linux workstation used, but though fine in Linux, that just didn&#39;t look pretty in Putty. Next, I found posts referencing these &lt;a href=&#34;https://github.com/eugeneching/consolas-powerline-vim&#34;&gt;patched Consolas&lt;/a&gt; fonts, but after installation, it still wasn&#39;t displaying the correct characters. Being a bit of a vim plugin amateur, I checked and double-checked settings but to no avail.&lt;/p&gt;
&lt;p&gt;Then I came across some comments about the new (rewritten in Python) powerline plugin not using the same codes as the old powerline.   By this time, I just wanted it working. This was one of those slight 10min deviations that was making me forget what I was originally doing. Enter cut and paste and the perl one-liner.&lt;/p&gt;
&lt;p&gt;I used charmap to lookup the UTF-8 character codes, and then printed them to the terminal. Yippee! This at least confirmed my terminal, fonts and putty were correctly setup to display the characters, so the problem wasn&#39;t in either of these areas. So I looked at the default powerline config.json, and confirmed that it wasn&#39;t displaying the characters I was expecting to see. So next I &lt;a href=&#34;https://powerline.readthedocs.org/en/latest/configuration.html&#34;&gt;configured a local config.json&lt;/a&gt;
and simply cut and paste the characters output from the perl one-liner and pasted them into the config.json in my home directory.&lt;/p&gt;
&lt;p&gt;And voila...a working vim powerline plugin on Linux from Putty on Win7. Now I know this is not the right solution, and normally curiosity would force me get to the bottom of this and understand what was wrong, but having already spent an hr reading about the plugin and comments and dead ends refering to the old non-python version of the plugin, this got me a working powerline in Windows and so I&#39;m happy with that. I just had to have those cute triangles in my menu bar - and no, ugly chars was not an option :-)&lt;/p&gt;
&lt;p&gt;Getting SyntaxHighlighter to display these glyphs is certainly not something I want to spend 2 minutes investigating at the moment, so instead a screenshot of the perl one-liner and the changes to config.json:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://purplecarrot.co.uk/images/posts/powerlineputty.png&#34; alt=&#34;Glyph icons&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Git Cloning Behind a Proxy</title>
      <link>https://purplecarrot.co.uk/2013/09/06/git-cloning/</link>
      <pubDate>Fri, 06 Sep 2013 17:33:00 +0100</pubDate>
      
      <guid>https://purplecarrot.co.uk/2013/09/06/git-cloning/</guid>
      <description>
        
          &lt;p&gt;Normally my development environment lives on my nicely configured workstation. However, sometimes you&#39;re on a server, with no certificate chain installed for verification and behind a corporate firewall where git protocol is blocked and not permitted. If you just want to get at the code, using the https url to the git repository and turning off certificate verification can get you the code quickly.  I found the following git config items helpful in this situation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;git config --global http.proxy https://proxy.mycompany.com:8080/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;git config --global https.sslVerify&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is indeed not good practice to get accustomed to ignoring certs, but on this repo the cert had expired in any case, so it was a moot point. Whilst troubleshooting this issue, I also found the useful GIT_CURL_VERBOSE=1 environment variable that can be set to show curl interactions git is doing under the covers.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
